import uuid
from datetime import datetime, timedelta
import click
from .database import SessionLocal, Base, engine
from .models import Client, Contract, Event, User, Role
from argon2 import PasswordHasher
from crm.auth import authenticate_user, get_current_user, require_role

ph = PasswordHasher()


# === Initialiser la base si besoin ===
Base.metadata.create_all(engine)


@click.group()
def cli():
    """CRM CLI - G√©rer Clients, Contrats, Ev√©nements"""
    pass


# === LOGIN ===
@cli.command()
@click.option('--email', prompt="Email")
@click.option('--password', prompt=True, hide_input=True)
def login(email, password):
    """Connexion pour obtenir un token JWT"""
    try:
        authenticate_user(email, password)
        click.echo("‚úÖ Connect√© ! Token sauvegard√© localement.")
    except Exception as e:
        click.echo(str(e))


# === Commande : Cr√©er un Role ===
@cli.command()
@click.option('--name', prompt="Nom du r√¥le (commercial/support/gestion)")
def add_role(name):
    """Cr√©er un nouveau r√¥le"""
    session = SessionLocal()
    role = Role(name=name)
    session.add(role)
    session.commit()
    click.echo(f"‚úÖ R√¥le cr√©√© : {role}")
    session.close()


# === Commande : Cr√©er un Utilisateur ===
@cli.command()
@click.option('--employee-number', prompt="Num√©ro d'employ√©")
@click.option('--name', prompt="Nom")
@click.option('--email', prompt="Email")
@click.option('--password', prompt=True, hide_input=True, confirmation_prompt=True)
@click.option('--role-id', prompt="ID du r√¥le")
def add_user(employee_number, name, email, password, role_id):
    """Cr√©er un nouvel utilisateur"""
    session = SessionLocal()
    role = session.get(Role, role_id)
    if not role:
        click.echo("‚ùå R√¥le introuvable.")
        return

    user = User(
        employee_number=employee_number,
        name=name,
        email=email,
        role=role
    )
    user.set_password(password)
    session.add(user)
    session.commit()
    click.echo(f"‚úÖ Utilisateur cr√©√© : {user}")
    session.close()


# === Commande : Cr√©er un Client ===
@cli.command()
@require_role(["gestion"])  # v√©rifier qui a acc√®s
@click.option('--name', prompt="Nom du client")
@click.option('--email', prompt="Email")
@click.option('--phone', prompt="T√©l√©phone")
@click.option('--company', prompt="Entreprise")
@click.option('--sales-contact', prompt="Contact commercial")
def add_client(name, email, phone, company, sales_contact):
    """Ajouter un nouveau client"""
    user = get_current_user()
    session = SessionLocal()
    client = Client(
        name=name,
        email=email,
        phone=phone,
        company=company,
        created_at=datetime.utcnow(),
        last_updated=datetime.utcnow(),
        sales_contact=user['name']
    )
    session.add(client)
    session.commit()
    click.echo(f"‚úÖ Client cr√©√© : {client}")
    session.close()


# === Commande : Cr√©er un Contrat ===
@cli.command()
@click.option('--client-id', prompt="ID du client")
@click.option('--amount-total', prompt="Montant total", type=float)
@click.option('--amount-remaining', prompt="Montant restant", type=float)
@click.option('--status', prompt="Statut (ex: signed, pending)")
def add_contract(client_id, amount_total, amount_remaining, status):
    """Ajouter un contrat pour un client existant"""
    session = SessionLocal()
    client = session.get(Client, client_id)
    if not client:
        click.echo("‚ùå Client non trouv√©.")
        return

    contract = Contract(
        unique_id=str(uuid.uuid4()),
        client_id=client.id,
        sales_contact=client.sales_contact,
        amount_total=amount_total,
        amount_remaining=amount_remaining,
        created_at=datetime.utcnow(),
        status=status
    )
    session.add(contract)
    session.commit()
    click.echo(f"‚úÖ Contrat cr√©√© : {contract}")
    session.close()


# === Commande : Cr√©er un √âv√©nement ===
@cli.command()
@click.option('--contract-id', prompt="ID du contrat")
@click.option('--start-days', prompt="Jours √† partir d'aujourd'hui pour START", type=int)
@click.option('--end-days', prompt="Jours √† partir d'aujourd'hui pour END", type=int)
@click.option('--support-contact', prompt="Contact support")
@click.option('--location', prompt="Lieu")
@click.option('--attendees', prompt="Nombre de participants", type=int)
@click.option('--notes', prompt="Notes")
def add_event(contract_id, start_days, end_days, support_contact, location, attendees, notes):
    """Ajouter un √©v√©nement pour un contrat existant"""
    session = SessionLocal()
    contract = session.get(Contract, contract_id)
    if not contract:
        click.echo("‚ùå Contrat non trouv√©.")
        return

    client = contract.client

    event = Event(
        contract_id=contract.id,
        client_name=client.name,
        client_contact=f"{client.phone} | {client.email}",
        event_date_start=datetime.utcnow() + timedelta(days=start_days),
        event_date_end=datetime.utcnow() + timedelta(days=end_days),
        support_contact=support_contact,
        location=location,
        attendees=attendees,
        notes=notes
    )
    session.add(event)
    session.commit()
    click.echo(f"‚úÖ √âv√©nement cr√©√© : {event}")
    session.close()


@cli.command()
@require_role(["gestion"])  # Seuls les r√¥les "gestion" peuvent ex√©cuter
def list_users():
    """Lister les utilisateurs (seulement pour 'gestion')"""
    session = SessionLocal()
    users = session.query(User).all()
    for u in users:
        click.echo(f"{u.id}: {u.name} ({u.email}) - {u.role.name if u.role else 'Aucun r√¥le'}")
    session.close()


@cli.command()
def whoami():
    """Affiche l'utilisateur connect√©"""
    try:
        user = get_current_user()
        click.echo(f"üë§ Connect√© en tant que : {user['name']} | r√¥le : {user['role']}")
    except Exception as e:
        click.echo(str(e))


# === Commande : Lister Clients, Contrats, √âv√©nements ===
@cli.command()
def list_all():
    """Lister tous les clients, contrats et √©v√©nements"""
    session = SessionLocal()
    clients = session.query(Client).all()
    contracts = session.query(Contract).all()
    events = session.query(Event).all()

    click.echo("\n=== Clients ===")
    for c in clients:
        click.echo(f"- {c.id}: {c.name} ({c.email})")

    click.echo("\n=== Contrats ===")
    for c in contracts:
        click.echo(f"- {c.id}: {c.unique_id} (Client ID: {c.client_id}, Montant: {c.amount_total})")

    click.echo("\n=== √âv√©nements ===")
    for e in events:
        click.echo(f"- {e.id}: {e.client_name} (D√©but: {e.event_date_start}, Lieu: {e.location})")

    session.close()


@cli.command()
def logout():
    """D√©connexion : supprime le token local"""
    import os
    try:
        os.remove(".token")
        click.echo("‚úÖ D√©connect√©(e).")
    except FileNotFoundError:
        click.echo("‚ÑπÔ∏è  Aucun token trouv√© : vous √™tes d√©j√† d√©connect√©(e).")


if __name__ == '__main__':
    cli()
