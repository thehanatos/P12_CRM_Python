import uuid
from datetime import datetime, timedelta
import click
from .database import SessionLocal, Base, engine
from .models import Client, Contract, Event, User, Role
from argon2 import PasswordHasher
from crm.auth import authenticate_user, get_current_user, require_role, require_auth

ph = PasswordHasher()


# === Initialiser la base si besoin ===
Base.metadata.create_all(engine)


@click.group()
def cli():
    """CRM CLI - G√©rer Clients, Contrats, Ev√©nements"""
    pass


# === LOGIN ===
@cli.command()
@click.option('--email', prompt="Email")
@click.option('--password', prompt=True, hide_input=True)
def login(email, password):
    """Connexion pour obtenir un token JWT"""
    try:
        authenticate_user(email, password)
        click.echo("‚úÖ Connect√© ! Token sauvegard√© localement.")
    except Exception as e:
        click.echo(str(e))


# === Commande : Cr√©er un Role ===
@cli.command()
@require_auth
@require_role(["gestion"])
def add_role(name):
    """Cr√©er un nouveau r√¥le"""
    session = SessionLocal()
    name = click.prompt("Nom du r√¥le (commercial/support/gestion)")
    role = Role(name=name)
    session.add(role)
    session.commit()
    click.echo(f"‚úÖ R√¥le cr√©√© : {role}")
    session.close()


# === Commande : Cr√©er un Utilisateur ===
@cli.command()
@require_auth
@require_role(["gestion"])
def add_user(user):
    """Cr√©er un nouvel utilisateur"""
    employee_number = click.prompt("Num√©ro d'employ√©")
    name = click.prompt("Nom")
    email = click.prompt("Email")
    password = click.prompt("Mot de passe", hide_input=True, confirmation_prompt=True)
    role_name = click.prompt("R√¥le (commercial / support / gestion)")
    session = SessionLocal()
    role = session.query(Role).filter_by(name=role_name).first()
    if not role:
        click.echo(f"‚ùå R√¥le '{role_name}' introuvable.")
        return

    user = User(
        employee_number=employee_number,
        name=name,
        email=email,
        role=role
    )
    user.set_password(password)
    session.add(user)
    session.commit()
    click.echo(f"‚úÖ Utilisateur cr√©√© : {user}")
    session.close()


# === Commande : Cr√©er un Client ===
@cli.command()
@require_auth
@require_role(["commercial"])
def add_client(user):
    """Ajouter un nouveau client (auth requis)."""

    name = click.prompt("Nom du client")
    email = click.prompt("Email")
    phone = click.prompt("T√©l√©phone")
    company = click.prompt("Entreprise")
    session = SessionLocal()
    client = Client(
        name=name,
        email=email,
        phone=phone,
        company=company,
        created_at=datetime.utcnow(),
        last_updated=datetime.utcnow(),
        sales_contact=user['name']
    )
    session.add(client)
    session.commit()
    click.echo(f"‚úÖ Client cr√©√© : {client}")
    session.close()


# === Commande : Cr√©er un Contrat ===
@cli.command()
@require_auth
@require_role(["gestion"])
def add_contract(user):
    """Ajouter un contrat pour un client existant"""
    client_id = click.prompt("ID du client")
    amount_total = click.prompt("Montant total")
    amount_remaining = click.prompt("Montant restant")
    status = click.prompt("Statut (ex: signed, pending)")
    session = SessionLocal()
    client = session.get(Client, client_id)
    if not client:
        click.echo("‚ùå Client non trouv√©.")
        return

    contract = Contract(
        unique_id=str(uuid.uuid4()),
        client_id=client.id,
        sales_contact=client.sales_contact,
        amount_total=amount_total,
        amount_remaining=amount_remaining,
        created_at=datetime.utcnow(),
        status=status
    )
    session.add(contract)
    session.commit()
    click.echo(f"‚úÖ Contrat cr√©√© : {contract}")
    session.close()


# === Commande : Modifier un de ses Contrats (commercial) ou Tous (gestion)===
@cli.command()
@require_auth
@require_role(["gestion", "commercial"])
def update_contract(user):
    """Modifier un contrat existant (gestion = tous, commercial = uniquement les siens)"""
    session = SessionLocal()
    # R√©cup√©rer le nom du r√¥le
    user_role = user.get('role')

    if user_role == "gestion":
        contracts = session.query(Contract).all()
    elif user_role == "commercial":
        contracts = session.query(Contract).filter_by(sales_contact=user.get('name')).all()
    else:
        click.echo("‚ùå Vous n'avez pas les droits pour modifier les contrats.")
        return

    if not contracts:
        click.echo("‚ùå Aucun contrat trouv√©.")
        return

    click.echo("\nüìÑ Liste des contrats :")
    for c in contracts:
        click.echo(f"  ID: {c.id} | Client ID: {c.client_id} | Montant: {c.amount_total} | Statut: {c.status}")

    contract_id = click.prompt("ID du contrat √† modifier")

    contract = session.get(Contract, contract_id)
    if not contract:
        click.echo("‚ùå Contrat non trouv√©")
        return

    # Pour les commerciaux, v√©rifier qu'ils ne modifient que leurs contrats
    if user_role == "commercial" and contract.sales_contact != user.get('name'):
        click.echo("‚ùå Vous ne pouvez modifier que vos propres contrats.")
        return

    # Afficher les statuts disponibles (exemple)
    VALID_STATUSES = ["new", "pending", "signed", "cancelled"]
    click.echo(f"üìå Statuts disponibles : {', '.join(VALID_STATUSES)}")
    click.echo(f"üîé Contrat actuel : {contract}")
    # Prompts facultatifs ‚Äî laisser vide pour ne pas modifier
    new_amount_total = click.prompt("Nouveau montant total", default=contract.amount_total, show_default=True)
    new_amount_remaining = click.prompt("Nouveau montant restant",
                                        default=contract.amount_remaining, show_default=True)

    while True:
        new_status = click.prompt("Nouveau statut", default=contract.status, show_default=True)
        if new_status in VALID_STATUSES:
            break
        click.echo("‚ùå Statut invalide. Choisissez parmi : " + ", ".join(VALID_STATUSES))

    contract.amount_total = float(new_amount_total)
    contract.amount_remaining = float(new_amount_remaining)
    contract.status = new_status
    contract.last_updated = datetime.utcnow()

    session.commit()
    click.echo(f"‚úÖ Contrat mis √† jour : {contract}")
    session.close()


# === Commande : Cr√©er un √âv√©nement ===
@cli.command()
@require_auth
@require_role(["commercial"])
def add_event(user):
    """Ajouter un √©v√©nement pour un contrat existant"""
    contract_id = click.prompt("ID du contrat")
    start_days = click.prompt("Jours √† partir d'aujourd'hui pour START")
    end_days = click.prompt("Jours √† partir d'aujourd'hui pour END")
    support_contact = click.prompt("Contact support")
    location = click.prompt("Lieu")
    attendees = click.prompt("Nombre de participants")
    notes = click.prompt("Notes")
    session = SessionLocal()
    contract = session.get(Contract, contract_id)
    if not contract:
        click.echo("‚ùå Contrat non trouv√©.")
        return

    client = contract.client

    event = Event(
        contract_id=contract.id,
        client_name=client.name,
        client_contact=f"{client.phone} | {client.email}",
        event_date_start=datetime.utcnow() + timedelta(days=start_days),
        event_date_end=datetime.utcnow() + timedelta(days=end_days),
        support_contact=support_contact,
        location=location,
        attendees=attendees,
        notes=notes
    )
    session.add(event)
    session.commit()
    click.echo(f"‚úÖ √âv√©nement cr√©√© : {event}")
    session.close()


@cli.command()
@require_role(["gestion"])
def list_users():
    """Lister les utilisateurs (seulement pour 'gestion')"""
    session = SessionLocal()
    users = session.query(User).all()
    for u in users:
        click.echo(f"{u.id}: {u.name} ({u.email}) - {u.role.name if u.role else 'Aucun r√¥le'}")
    session.close()


@cli.command()
def whoami():
    """Affiche l'utilisateur connect√©"""
    try:
        user = get_current_user()
        click.echo(f"üë§ Connect√© en tant que : {user['name']} | r√¥le : {user['role']}")
    except Exception as e:
        click.echo(str(e))


# === Commande : Lister Clients, Contrats, √âv√©nements ===
@cli.command()
def list_all():
    """Lister tous les clients, contrats et √©v√©nements"""
    session = SessionLocal()
    clients = session.query(Client).all()
    contracts = session.query(Contract).all()
    events = session.query(Event).all()

    click.echo("\n=== Clients ===")
    for c in clients:
        click.echo(f"- {c.id}: {c.name} ({c.email})")

    click.echo("\n=== Contrats ===")
    for c in contracts:
        click.echo(f"- {c.id}: {c.unique_id} (Client ID: {c.client_id}, Montant: {c.amount_total})")

    click.echo("\n=== √âv√©nements ===")
    for e in events:
        click.echo(f"- {e.id}: {e.client_name} (D√©but: {e.event_date_start}, Lieu: {e.location})")

    session.close()


@cli.command()
def logout():
    """D√©connexion : supprime le token local"""
    import os
    try:
        os.remove(".token")
        click.echo("‚úÖ D√©connect√©(e).")
    except FileNotFoundError:
        click.echo("‚ÑπÔ∏è  Aucun token trouv√© : vous √™tes d√©j√† d√©connect√©(e).")


if __name__ == '__main__':
    cli()
